jochre {
  search {
    locale = null

    # The character that marks a wildcard in a phrase search
    wildcard-marker = "*"

    hyphen-regex = "^(.+)([-־⸗])$"

    directory {
      core = "."
      core = ${?JOCHRE3_SEARCH_DIRECTORY}
    }

    database {
      class-name = "org.postgresql.Driver"

      url = "jdbc:postgresql://localhost:5432/jochre_search"
      url = ${?POSTGRES_URL}

      username: jochre # never write real credential here
      password: password # the only one accepted are default for test

      username: ${?POSTGRES_USER}
      password: ${?POSTGRES_PASSWORD}

      connection-timeout = 10000
      minimum-idle = 1
      maximum-pool-size = 5
    }

    # How many books to index in parallel
    index-parallelism = 3

    index {
      directory = ${jochre.search.directory.core}/index

      # Directories to contain the images, alto and metadata
      # Can be split into multiple directories (e.g. to split over several drives)
      # There should always be one entry with "min-ref" set to the empty string
      content-directories = [
        {
          min-ref = ""
          directory = ${jochre.search.directory.core}/content
        },
        {
          min-ref = "nybc205000"
          directory = ${jochre.search.directory.core}/content2
        }
      ]
    }

    highlighter {
      default-max-snippets = 100
      default-row-padding = 2
      formatter-pre-tag = """<span class="highlight">"""
      formatter-post-tag = "</span>"
    }

    # e-mail configuration parameters if send-email = true
    mail {
      smtp.port = 587
      smtp.auth = true
      smtp.starttls.enable = true
      # smtp.host = smtp.example.com (required)
      # from = from@example.com (required)
      # from-name = Sender Name
      # password = my-secret-password
      # to = to@example.com (required)
      # to-name = Recipient Name

      # Optional cc
      # cc = cc@example.com
      # cc-name = CC-Recepient Name
    }

    corrections {
      # Should e-mails be sent when corrections are made?
      send-mail = false

      # The URL to send undo commands from e-mails
      # It should contain the string ${CORRECTION_ID} as a placeholder for the correction id.
      undo-command-url = null
    }

    # Book URLs can use the variables ${REF} for the book reference.
    # If the book has one of these collections (first one wins), use the url listed here.
    book-urls-by-collection = [
      #{
      #  collection = "yiddishbookcenteryizkorbooks",
      #  url = "https://www.yiddishbookcenter.org/collections/yizkor-books/yzk-${REF}"
      #}
    ]

    # The default url if nothing matches above.
    # If this is null, and no book-url-by-collection match for a book, it will use the url from the book's metadata.
    default-book-url = "https://archive.org/details/${REF}"

    # Deep links can use the variables ${REF} for the book reference, and ${PAGE} for the page number.
    # If the book has one of these collections (first one wins), use the deep link listed here.
    deep-links-by-collection = [
      #{
      #  collection = "yiddishbookcenteryizkorbooks",
      #  url = "https://www.yiddishbookcenter.org/collections/yizkor-books/yzk-${REF}?book-page=${PAGE}&book-mode=1up"
      #}
    ]

    # The default deep link if nothing matches above.
    # If this is null, and no deep-links-by-collection match for a book, a deep-link will not be returned.
    default-deep-link = "https://archive.org/details/${REF}/page/n${PAGE}/mode/1up"
  }
}